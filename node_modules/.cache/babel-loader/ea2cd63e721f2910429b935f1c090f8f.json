{"ast":null,"code":"var _jsxFileName = \"/Users/jroseman/play/football/app/src/containers/QBDashboardContainer.tsx\";\nimport React from 'react';\nimport { aggregateQuarterbackGameData } from '../transformers/PlayerDashboardDataTransformers';\nimport GameStatsTableComponent from '../components/StatsTableComponent';\nexport default (({\n  player\n}) => {\n  const headlineStatsTableData = formatGamesForHeadlineStatsTable(player);\n  const allGamesTableData = formatGamesForAllGamesTable(player);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GameStatsTableComponent, {\n    headers: headlineStatsTableData.headers,\n    rows: headlineStatsTableData.rows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GameStatsTableComponent, {\n    headers: allGamesTableData.headers,\n    rows: allGamesTableData.rows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }));\n});\n\nfunction formatGamesForAllGamesTable({\n  playerGames\n}) {\n  const headers = [\"Game ID\", \"Season\", \"Touchdowns\", \"Attempts\", \"Completions\", \"Percentage\", \"Fantasy\"];\n  const rows = playerGames.map(game => [game.gameId, game.seasonYear, game.passingTouchdownsAmt, game.passingAttemptsAmt, game.passingCompletionsAmt, `${(100 * game.passingCompletionsAmt / game.passingAttemptsAmt).toFixed(2)}%`, game.fantasyPoints]);\n  return {\n    headers,\n    rows\n  };\n}\n\nfunction formatGamesForHeadlineStatsTable({\n  playerGames\n}) {\n  const agg = aggregateQuarterbackGameData(playerGames);\n  const headers = [\"Agg\", \"Games\", \"Touchdowns\", \"Attempts\", \"Yardage\", \"Completions\", \"Percentage\", \"Fantasy\", \"Deviation\"];\n  const rows = [[\"Avg\", agg.gamesAmt, agg.avgPassingTouchdownsAmt.toFixed(3), agg.avgPassingAttemptsAmt.toFixed(3), agg.avgPassingYardageAmt.toFixed(3), agg.avgPassingCompletionsAmt.toFixed(3), `${(100 * agg.avgPassingCompletionPctg).toFixed(1)}%`, agg.avgFantasyPoints.toFixed(1), agg.avgFantasyPointsDev.toFixed(1)], [\"Max\", agg.gamesAmt, agg.maxPassingTouchdownsAmt, agg.maxPassingAttemptsAmt, agg.maxPassingYardageAmt, agg.maxPassingCompletionsAmt, `${(100 * agg.maxPassingCompletionPctg).toFixed(1)}%`, agg.maxFantasyPoints, agg.maxFantasyPointsDev], [\"Min\", agg.gamesAmt, agg.minPassingTouchdownsAmt, agg.minPassingAttemptsAmt, agg.minPassingYardageAmt, agg.minPassingCompletionsAmt, `${(100 * agg.minPassingCompletionPctg).toFixed(1)}%`, agg.minFantasyPoints, agg.minFantasyPointsDev]];\n  return {\n    headers,\n    rows\n  };\n}","map":{"version":3,"sources":["/Users/jroseman/play/football/app/src/containers/QBDashboardContainer.tsx"],"names":["React","aggregateQuarterbackGameData","GameStatsTableComponent","player","headlineStatsTableData","formatGamesForHeadlineStatsTable","allGamesTableData","formatGamesForAllGamesTable","headers","rows","playerGames","map","game","gameId","seasonYear","passingTouchdownsAmt","passingAttemptsAmt","passingCompletionsAmt","toFixed","fantasyPoints","agg","gamesAmt","avgPassingTouchdownsAmt","avgPassingAttemptsAmt","avgPassingYardageAmt","avgPassingCompletionsAmt","avgPassingCompletionPctg","avgFantasyPoints","avgFantasyPointsDev","maxPassingTouchdownsAmt","maxPassingAttemptsAmt","maxPassingYardageAmt","maxPassingCompletionsAmt","maxPassingCompletionPctg","maxFantasyPoints","maxFantasyPointsDev","minPassingTouchdownsAmt","minPassingAttemptsAmt","minPassingYardageAmt","minPassingCompletionsAmt","minPassingCompletionPctg","minFantasyPoints","minFantasyPointsDev"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Player } from '../types/PlayerDashboardTypes';\nimport { aggregateQuarterbackGameData } from '../transformers/PlayerDashboardDataTransformers';\nimport GameStatsTableComponent from '../components/StatsTableComponent';\nimport { QuarterbackGame, QuarterbackDataAggregation } from '../types/QBDashboardTypes';\n\ntype PlayerDashboardContainerProps = {\n  player: Player\n}\n\nexport default ({ player }: PlayerDashboardContainerProps) => {\n  const headlineStatsTableData = formatGamesForHeadlineStatsTable(player);\n  const allGamesTableData = formatGamesForAllGamesTable(player);\n\n  return (\n    <div>\n      <GameStatsTableComponent headers={headlineStatsTableData.headers} rows={headlineStatsTableData.rows} />\n      <GameStatsTableComponent headers={allGamesTableData.headers} rows={allGamesTableData.rows} />\n    </div>\n  )\n}\n\nfunction formatGamesForAllGamesTable({ playerGames }: Player) {\n  const headers = [\n    \"Game ID\",\n    \"Season\",\n    \"Touchdowns\",\n    \"Attempts\",\n    \"Completions\",\n    \"Percentage\",\n    \"Fantasy\"\n  ];\n  const rows = playerGames.map((game: QuarterbackGame) => [\n    game.gameId,\n    game.seasonYear,\n    game.passingTouchdownsAmt,\n    game.passingAttemptsAmt,\n    game.passingCompletionsAmt,\n    `${(100 * game.passingCompletionsAmt / game.passingAttemptsAmt).toFixed(2)}%`,\n    game.fantasyPoints\n  ]);\n  return { headers, rows };\n}\n\nfunction formatGamesForHeadlineStatsTable({ playerGames }: Player) {\n  const agg: QuarterbackDataAggregation = aggregateQuarterbackGameData(playerGames);\n  const headers = [\n    \"Agg\",\n    \"Games\",\n    \"Touchdowns\",\n    \"Attempts\",\n    \"Yardage\",\n    \"Completions\",\n    \"Percentage\",\n    \"Fantasy\",\n    \"Deviation\"\n  ];\n  const rows = [\n    [\n      \"Avg\",\n      agg.gamesAmt,\n      agg.avgPassingTouchdownsAmt.toFixed(3),\n      agg.avgPassingAttemptsAmt.toFixed(3),\n      agg.avgPassingYardageAmt.toFixed(3),\n      agg.avgPassingCompletionsAmt.toFixed(3),\n      `${(100 * agg.avgPassingCompletionPctg).toFixed(1)}%`,\n      agg.avgFantasyPoints.toFixed(1),\n      agg.avgFantasyPointsDev.toFixed(1)\n    ],\n    [\n      \"Max\",\n      agg.gamesAmt,\n      agg.maxPassingTouchdownsAmt,\n      agg.maxPassingAttemptsAmt,\n      agg.maxPassingYardageAmt,\n      agg.maxPassingCompletionsAmt,\n      `${(100 * agg.maxPassingCompletionPctg).toFixed(1)}%`,\n      agg.maxFantasyPoints,\n      agg.maxFantasyPointsDev\n    ],\n    [\n      \"Min\",\n      agg.gamesAmt,\n      agg.minPassingTouchdownsAmt,\n      agg.minPassingAttemptsAmt,\n      agg.minPassingYardageAmt,\n      agg.minPassingCompletionsAmt,\n      `${(100 * agg.minPassingCompletionPctg).toFixed(1)}%`,\n      agg.minFantasyPoints,\n      agg.minFantasyPointsDev\n    ]\n  ];\n  return { headers, rows };\n}\n"]},"metadata":{},"sourceType":"module"}