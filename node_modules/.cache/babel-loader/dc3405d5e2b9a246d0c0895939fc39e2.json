{"ast":null,"code":"export function aggregateQuarterbackGameData(games) {\n  const avgPassingAttemptsAmt = games.reduce((a, g) => a + g.passingAttemptsAmt, 0) / games.length;\n  const avgPassingCompletionsAmt = games.reduce((a, g) => a + g.passingCompletionsAmt, 0) / games.length;\n  const avgPassingCompletionPctg = avgPassingCompletionsAmt / avgPassingAttemptsAmt;\n  const avgPassingTouchdownsAmt = games.reduce((a, g) => a + g.passingTouchdownsAmt, 0) / games.length;\n  const maxPassingAttemptsAmt = games.reduce((max, g) => Math.max(max, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const maxPassingCompletionsAmt = games.reduce((max, g) => Math.max(max, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const maxPassingCompletionPctg = games.reduce((max, g) => Math.max(max, g.passingCompletionsAmt / g.passingAttemptsAmt), games[0].passingCompletionsAmt / games[0].passingAttemptsAmt);\n  const minPassingAttemptsAmt = games.reduce((min, g) => Math.min(min, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const minPassingCompletionsAmt = games.reduce((min, g) => Math.min(min, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const minPassingCompletionPctg = games.reduce((min, g) => Math.min(min, g.passingCompletionsAmt / g.passingAttemptsAmt), games[0].passingCompletionsAmt / games[0].passingAttemptsAmt);\n  return {\n    gamesAmt: games.length,\n    avgPassingAttemptsAmt,\n    avgPassingCompletionsAmt,\n    avgPassingCompletionPctg,\n    avgPassingTouchdownsAmt,\n    maxPassingAttemptsAmt,\n    maxPassingCompletionsAmt,\n    maxPassingCompletionPctg,\n    minPassingAttemptsAmt,\n    minPassingCompletionsAmt,\n    minPassingCompletionPctg\n  };\n}\nexport function transformQuarterbackGameData(games) {\n  return games.map(game => {\n    // Calculate the completion percentage\n    const passingCompletionPctgRaw = 100 * (game.passingCompletionsAmt / game.passingAttemptsAmt);\n    const passingCompletionPctg = passingCompletionPctgRaw.toFixed(2);\n    return { ...game,\n      passingCompletionPctg\n    };\n  });\n}","map":{"version":3,"sources":["/Users/jroseman/play/football/app/src/transformers/PlayerDashboardDataTransformers.ts"],"names":["aggregateQuarterbackGameData","games","avgPassingAttemptsAmt","reduce","a","g","passingAttemptsAmt","length","avgPassingCompletionsAmt","passingCompletionsAmt","avgPassingCompletionPctg","avgPassingTouchdownsAmt","passingTouchdownsAmt","maxPassingAttemptsAmt","max","Math","maxPassingCompletionsAmt","maxPassingCompletionPctg","minPassingAttemptsAmt","min","minPassingCompletionsAmt","minPassingCompletionPctg","gamesAmt","transformQuarterbackGameData","map","game","passingCompletionPctgRaw","passingCompletionPctg","toFixed"],"mappings":"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","sourcesContent":["import { QuarterbackGame, QuarterbackPerformanceLineChartDatapoint, QuarterbackDataAggregation } from \"../types/QuarterbackDashboardTypes\";\n\nexport function aggregateQuarterbackGameData(games: QuarterbackGame[]): QuarterbackDataAggregation {\n  const avgPassingAttemptsAmt = games.reduce((a, g) => a + g.passingAttemptsAmt, 0) / games.length;\n  const avgPassingCompletionsAmt = games.reduce((a, g) => a + g.passingCompletionsAmt, 0) / games.length;\n  const avgPassingCompletionPctg = avgPassingCompletionsAmt / avgPassingAttemptsAmt;\n  const avgPassingTouchdownsAmt = games.reduce((a, g) => a + g.passingTouchdownsAmt, 0) / games.length;\n\n  const maxPassingAttemptsAmt = games.reduce((max, g) => Math.max(max, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const maxPassingCompletionsAmt = games.reduce((max, g) => Math.max(max, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const maxPassingCompletionPctg = games.reduce(\n    (max, g) => Math.max(max, g.passingCompletionsAmt / g.passingAttemptsAmt),\n    games[0].passingCompletionsAmt / games[0].passingAttemptsAmt,\n  );\n\n  const minPassingAttemptsAmt = games.reduce((min, g) => Math.min(min, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const minPassingCompletionsAmt = games.reduce((min, g) => Math.min(min, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const minPassingCompletionPctg = games.reduce(\n    (min, g) => Math.min(min, g.passingCompletionsAmt / g.passingAttemptsAmt),\n    games[0].passingCompletionsAmt / games[0].passingAttemptsAmt,\n  );\n\n  return {\n    gamesAmt: games.length,\n    avgPassingAttemptsAmt,\n    avgPassingCompletionsAmt,\n    avgPassingCompletionPctg,\n    avgPassingTouchdownsAmt,\n    maxPassingAttemptsAmt,\n    maxPassingCompletionsAmt,\n    maxPassingCompletionPctg,\n    minPassingAttemptsAmt,\n    minPassingCompletionsAmt,\n    minPassingCompletionPctg\n  }\n}\n\nexport function transformQuarterbackGameData(games: QuarterbackGame[]): QuarterbackPerformanceLineChartDatapoint[] {\n  return games.map((game: QuarterbackGame) => {\n    // Calculate the completion percentage\n    const passingCompletionPctgRaw = 100 * (game.passingCompletionsAmt / game.passingAttemptsAmt);\n    const passingCompletionPctg = passingCompletionPctgRaw.toFixed(2);\n    return {\n      ...game,\n      passingCompletionPctg\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}