{"ast":null,"code":"var _jsxFileName = \"/Users/jroseman/play/football/app/src/containers/QBDashboardContainer.tsx\";\nimport React from 'react';\nimport { aggregateQuarterbackGameData, transformQuarterbackGameData } from '../transformers/PlayerDashboardDataTransformers';\nimport GameStatsTableComponent from '../components/StatsTableComponent';\nimport PerformanceLineChartComponent from '../components/PerformanceLineChartComponent';\nexport default (({\n  player\n}) => {\n  const lineChartData = formatGamesForPerfLineChart(player);\n  const headlineStatsTableData = formatGamesForHeadlineStatsTable(player);\n  const allGamesTableData = formatGamesForAllGamesTable(player);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PerformanceLineChartComponent, {\n    lines: lineChartData.lines,\n    data: lineChartData.data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GameStatsTableComponent, {\n    headers: headlineStatsTableData.headers,\n    rows: headlineStatsTableData.rows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GameStatsTableComponent, {\n    headers: allGamesTableData.headers,\n    rows: allGamesTableData.rows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }));\n});\n\nfunction formatGamesForPerfLineChart({\n  playerGames\n}) {\n  const data = transformQuarterbackGameData(playerGames);\n  const lines = [{\n    dataKey: \"passingYardageAmt\",\n    color: \"green\"\n  }];\n  return {\n    data,\n    lines\n  };\n}\n\nfunction formatGamesForAllGamesTable({\n  playerGames\n}) {\n  const headers = [\"Game ID\", \"Season\", \"Touchdowns\", \"Attempts\", \"Completions\", \"Percentage\"];\n  const rows = playerGames.map(game => [game.gameId, game.seasonYear, game.passingTouchdownsAmt, game.passingAttemptsAmt, game.passingCompletionsAmt, `${(100 * game.passingCompletionsAmt / game.passingAttemptsAmt).toFixed(2)}%`]);\n  return {\n    headers,\n    rows\n  };\n}\n\nfunction formatGamesForHeadlineStatsTable({\n  playerGames\n}) {\n  const agg = aggregateQuarterbackGameData(playerGames);\n  const headers = [\"Agg\", \"Games\", \"Touchdowns\", \"Attempts\", \"Yardage\", \"Completions\", \"Percentage\"];\n  const rows = [[\"Avg\", agg.gamesAmt, agg.avgPassingTouchdownsAmt.toFixed(3), agg.avgPassingAttemptsAmt.toFixed(3), agg.avgPassingYardageAmt.toFixed(3), agg.avgPassingCompletionsAmt.toFixed(3), `${(100 * agg.avgPassingCompletionPctg).toFixed(1)}%`], [\"Max\", agg.gamesAmt, agg.maxPassingTouchdownsAmt, agg.maxPassingAttemptsAmt, agg.maxPassingYardageAmt, agg.maxPassingCompletionsAmt, `${(100 * agg.maxPassingCompletionPctg).toFixed(1)}%`], [\"Min\", agg.gamesAmt, agg.minPassingTouchdownsAmt, agg.minPassingAttemptsAmt, agg.minPassingYardageAmt, agg.minPassingCompletionsAmt, `${(100 * agg.minPassingCompletionPctg).toFixed(1)}%`]];\n  return {\n    headers,\n    rows\n  };\n}","map":{"version":3,"sources":["/Users/jroseman/play/football/app/src/containers/QBDashboardContainer.tsx"],"names":["React","aggregateQuarterbackGameData","transformQuarterbackGameData","GameStatsTableComponent","PerformanceLineChartComponent","player","lineChartData","formatGamesForPerfLineChart","headlineStatsTableData","formatGamesForHeadlineStatsTable","allGamesTableData","formatGamesForAllGamesTable","lines","data","headers","rows","playerGames","dataKey","color","map","game","gameId","seasonYear","passingTouchdownsAmt","passingAttemptsAmt","passingCompletionsAmt","toFixed","agg","gamesAmt","avgPassingTouchdownsAmt","avgPassingAttemptsAmt","avgPassingYardageAmt","avgPassingCompletionsAmt","avgPassingCompletionPctg","maxPassingTouchdownsAmt","maxPassingAttemptsAmt","maxPassingYardageAmt","maxPassingCompletionsAmt","maxPassingCompletionPctg","minPassingTouchdownsAmt","minPassingAttemptsAmt","minPassingYardageAmt","minPassingCompletionsAmt","minPassingCompletionPctg"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Player } from '../types/PlayerDashboardTypes';\nimport { aggregateQuarterbackGameData, transformQuarterbackGameData } from '../transformers/PlayerDashboardDataTransformers';\nimport GameStatsTableComponent from '../components/StatsTableComponent';\nimport { QuarterbackGame, QuarterbackDataAggregation } from '../types/QBDashboardTypes';\nimport PerformanceLineChartComponent from '../components/PerformanceLineChartComponent';\n\ntype PlayerDashboardContainerProps = {\n  player: Player\n}\n\nexport default ({ player }: PlayerDashboardContainerProps) => {\n  const lineChartData = formatGamesForPerfLineChart(player);\n  const headlineStatsTableData = formatGamesForHeadlineStatsTable(player);\n  const allGamesTableData = formatGamesForAllGamesTable(player);\n\n  return (\n    <div>\n      <PerformanceLineChartComponent lines={lineChartData.lines} data={lineChartData.data} />\n      <GameStatsTableComponent headers={headlineStatsTableData.headers} rows={headlineStatsTableData.rows} />\n      <GameStatsTableComponent headers={allGamesTableData.headers} rows={allGamesTableData.rows} />\n    </div>\n  )\n}\n\nfunction formatGamesForPerfLineChart({ playerGames }: Player) {\n  const data = transformQuarterbackGameData(playerGames);\n  const lines = [\n    {\n      dataKey: \"passingYardageAmt\",\n      color: \"green\"\n    }\n  ];\n  return { data, lines }\n}\n\nfunction formatGamesForAllGamesTable({ playerGames }: Player) {\n  const headers = [\n    \"Game ID\",\n    \"Season\",\n    \"Touchdowns\",\n    \"Attempts\",\n    \"Completions\",\n    \"Percentage\"\n  ];\n  const rows = playerGames.map((game: QuarterbackGame) => [\n    game.gameId,\n    game.seasonYear,\n    game.passingTouchdownsAmt,\n    game.passingAttemptsAmt,\n    game.passingCompletionsAmt,\n    `${(100 * game.passingCompletionsAmt / game.passingAttemptsAmt).toFixed(2)}%`\n  ]);\n  return { headers, rows };\n}\n\nfunction formatGamesForHeadlineStatsTable({ playerGames }: Player) {\n  const agg: QuarterbackDataAggregation = aggregateQuarterbackGameData(playerGames);\n  const headers = [\n    \"Agg\",\n    \"Games\",\n    \"Touchdowns\",\n    \"Attempts\",\n    \"Yardage\",\n    \"Completions\",\n    \"Percentage\"\n  ];\n  const rows = [\n    [\n      \"Avg\",\n      agg.gamesAmt,\n      agg.avgPassingTouchdownsAmt.toFixed(3),\n      agg.avgPassingAttemptsAmt.toFixed(3),\n      agg.avgPassingYardageAmt.toFixed(3),\n      agg.avgPassingCompletionsAmt.toFixed(3),\n      `${(100 * agg.avgPassingCompletionPctg).toFixed(1)}%`\n    ],\n    [\n      \"Max\",\n      agg.gamesAmt,\n      agg.maxPassingTouchdownsAmt,\n      agg.maxPassingAttemptsAmt,\n      agg.maxPassingYardageAmt,\n      agg.maxPassingCompletionsAmt,\n      `${(100 * agg.maxPassingCompletionPctg).toFixed(1)}%`\n    ],\n    [\n      \"Min\",\n      agg.gamesAmt,\n      agg.minPassingTouchdownsAmt,\n      agg.minPassingAttemptsAmt,\n      agg.minPassingYardageAmt,\n      agg.minPassingCompletionsAmt,\n      `${(100 * agg.minPassingCompletionPctg).toFixed(1)}%`\n    ]\n  ];\n  return { headers, rows };\n}\n"]},"metadata":{},"sourceType":"module"}