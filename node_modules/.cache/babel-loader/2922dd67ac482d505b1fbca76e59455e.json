{"ast":null,"code":"export function aggregateQuarterbackGameData(games) {\n  const avgPassingTouchdownsAmt = games.reduce((a, g) => a + g.passingTouchdownsAmt, 0) / games.length;\n  const avgPassingAttemptsAmt = games.reduce((a, g) => a + g.passingAttemptsAmt, 0) / games.length;\n  const avgPassingCompletionsAmt = games.reduce((a, g) => a + g.passingCompletionsAmt, 0) / games.length;\n  const avgPassingCompletionPctg = avgPassingCompletionsAmt / avgPassingAttemptsAmt;\n  const avgPassingYardageAmt = games.reduce((a, g) => a + g.passingYardageAmt, 0) / games.length;\n  const avgFantasyPoints = games.reduce((a, g) => a + g.fantasyPoints, 0) / games.length;\n  const avgFantasyPointsDev = games.reduce((a, g) => a + Math.abs(g.fantasyPoints - avgFantasyPoints), 0) / games.length;\n  const maxPassingTouchdownsAmt = games.reduce((max, g) => Math.max(max, g.passingTouchdownsAmt), games[0].passingTouchdownsAmt);\n  const maxPassingAttemptsAmt = games.reduce((max, g) => Math.max(max, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const maxPassingCompletionsAmt = games.reduce((max, g) => Math.max(max, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const maxPassingCompletionPctg = games.reduce((max, g) => Math.max(max, g.passingCompletionsAmt / g.passingAttemptsAmt), games[0].passingCompletionsAmt / games[0].passingAttemptsAmt);\n  const maxPassingYardageAmt = games.reduce((max, g) => Math.max(max, g.passingYardageAmt), games[0].passingCompletionsAmt);\n  const maxFantasyPoints = games.reduce((max, g) => Math.max(max, g.fantasyPoints), games[0].passingCompletionsAmt);\n  const maxFantasyPointsDev = games.reduce((max, g) => Math.max(max, Math.abs(g.fantasyPoints - avgFantasyPoints)), 0) / games.length;\n  const minPassingTouchdownsAmt = games.reduce((min, g) => Math.min(min, g.passingTouchdownsAmt), games[0].passingTouchdownsAmt);\n  const minPassingAttemptsAmt = games.reduce((min, g) => Math.min(min, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const minPassingCompletionsAmt = games.reduce((min, g) => Math.min(min, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const minPassingCompletionPctg = games.reduce((min, g) => Math.min(min, g.passingCompletionsAmt / g.passingAttemptsAmt), games[0].passingCompletionsAmt / games[0].passingAttemptsAmt);\n  const minPassingYardageAmt = games.reduce((min, g) => Math.min(min, g.passingYardageAmt), games[0].passingCompletionsAmt);\n  const minFantasyPoints = games.reduce((min, g) => Math.min(min, g.fantasyPoints), games[0].passingCompletionsAmt);\n  const minFantasyPointsDev = games.reduce((min, g) => Math.min(min, Math.abs(g.fantasyPoints - avgFantasyPoints)), 0) / games.length;\n  return {\n    gamesAmt: games.length,\n    // Avg values\n    avgPassingTouchdownsAmt,\n    avgPassingAttemptsAmt,\n    avgPassingCompletionsAmt,\n    avgPassingCompletionPctg,\n    avgPassingYardageAmt,\n    avgFantasyPoints,\n    avgFantasyPointsDev,\n    // Max values\n    maxPassingTouchdownsAmt,\n    maxPassingAttemptsAmt,\n    maxPassingCompletionsAmt,\n    maxPassingCompletionPctg,\n    maxPassingYardageAmt,\n    maxFantasyPoints,\n    maxFantasyPointsDev,\n    // Min values\n    minPassingTouchdownsAmt,\n    minPassingAttemptsAmt,\n    minPassingCompletionsAmt,\n    minPassingCompletionPctg,\n    minPassingYardageAmt,\n    minFantasyPoints\n  };\n}\nexport function transformQuarterbackGameData(games) {\n  return games.map(game => ({ ...game,\n    passingCompletionPctg: (100 * (game.passingCompletionsAmt / game.passingAttemptsAmt)).toFixed(2)\n  }));\n}","map":{"version":3,"sources":["/Users/jroseman/play/football/app/src/transformers/PlayerDashboardDataTransformers.ts"],"names":["aggregateQuarterbackGameData","games","avgPassingTouchdownsAmt","reduce","a","g","passingTouchdownsAmt","length","avgPassingAttemptsAmt","passingAttemptsAmt","avgPassingCompletionsAmt","passingCompletionsAmt","avgPassingCompletionPctg","avgPassingYardageAmt","passingYardageAmt","avgFantasyPoints","fantasyPoints","avgFantasyPointsDev","Math","abs","maxPassingTouchdownsAmt","max","maxPassingAttemptsAmt","maxPassingCompletionsAmt","maxPassingCompletionPctg","maxPassingYardageAmt","maxFantasyPoints","maxFantasyPointsDev","minPassingTouchdownsAmt","min","minPassingAttemptsAmt","minPassingCompletionsAmt","minPassingCompletionPctg","minPassingYardageAmt","minFantasyPoints","minFantasyPointsDev","gamesAmt","transformQuarterbackGameData","map","game","passingCompletionPctg","toFixed"],"mappings":"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","sourcesContent":["import { QuarterbackGame, QuarterbackPerformanceLineChartDatapoint, QuarterbackDataAggregation } from \"../types/QBDashboardTypes\";\n\nexport function aggregateQuarterbackGameData(games: QuarterbackGame[]): QuarterbackDataAggregation {\n  const avgPassingTouchdownsAmt = games.reduce((a, g) => a + g.passingTouchdownsAmt, 0) / games.length;\n  const avgPassingAttemptsAmt = games.reduce((a, g) => a + g.passingAttemptsAmt, 0) / games.length;\n  const avgPassingCompletionsAmt = games.reduce((a, g) => a + g.passingCompletionsAmt, 0) / games.length;\n  const avgPassingCompletionPctg = avgPassingCompletionsAmt / avgPassingAttemptsAmt;\n  const avgPassingYardageAmt = games.reduce((a, g) => a + g.passingYardageAmt, 0) / games.length;\n  const avgFantasyPoints = games.reduce((a, g) => a + g.fantasyPoints, 0) / games.length;\n  const avgFantasyPointsDev = games.reduce((a, g) => a + Math.abs(g.fantasyPoints - avgFantasyPoints), 0) / games.length;\n\n  const maxPassingTouchdownsAmt = games.reduce((max, g) => Math.max(max, g.passingTouchdownsAmt), games[0].passingTouchdownsAmt);\n  const maxPassingAttemptsAmt = games.reduce((max, g) => Math.max(max, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const maxPassingCompletionsAmt = games.reduce((max, g) => Math.max(max, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const maxPassingCompletionPctg = games.reduce(\n    (max, g) => Math.max(max, g.passingCompletionsAmt / g.passingAttemptsAmt),\n    games[0].passingCompletionsAmt / games[0].passingAttemptsAmt,\n  );\n  const maxPassingYardageAmt = games.reduce((max, g) => Math.max(max, g.passingYardageAmt), games[0].passingCompletionsAmt);\n  const maxFantasyPoints = games.reduce((max, g) => Math.max(max, g.fantasyPoints), games[0].passingCompletionsAmt);\n  const maxFantasyPointsDev = games.reduce((max, g) => Math.max(max, Math.abs(g.fantasyPoints - avgFantasyPoints)), 0) / games.length;\n\n  const minPassingTouchdownsAmt = games.reduce((min, g) => Math.min(min, g.passingTouchdownsAmt), games[0].passingTouchdownsAmt);\n  const minPassingAttemptsAmt = games.reduce((min, g) => Math.min(min, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const minPassingCompletionsAmt = games.reduce((min, g) => Math.min(min, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const minPassingCompletionPctg = games.reduce(\n    (min, g) => Math.min(min, g.passingCompletionsAmt / g.passingAttemptsAmt),\n    games[0].passingCompletionsAmt / games[0].passingAttemptsAmt,\n  );\n  const minPassingYardageAmt = games.reduce((min, g) => Math.min(min, g.passingYardageAmt), games[0].passingCompletionsAmt);\n  const minFantasyPoints = games.reduce((min, g) => Math.min(min, g.fantasyPoints), games[0].passingCompletionsAmt);\n  const minFantasyPointsDev = games.reduce((min, g) => Math.min(min, Math.abs(g.fantasyPoints - avgFantasyPoints)), 0) / games.length;\n\n  return {\n    gamesAmt: games.length,\n    // Avg values\n    avgPassingTouchdownsAmt,\n    avgPassingAttemptsAmt,\n    avgPassingCompletionsAmt,\n    avgPassingCompletionPctg,\n    avgPassingYardageAmt,\n    avgFantasyPoints,\n    avgFantasyPointsDev,\n    // Max values\n    maxPassingTouchdownsAmt,\n    maxPassingAttemptsAmt,\n    maxPassingCompletionsAmt,\n    maxPassingCompletionPctg,\n    maxPassingYardageAmt,\n    maxFantasyPoints,\n    maxFantasyPointsDev,\n    // Min values\n    minPassingTouchdownsAmt,\n    minPassingAttemptsAmt,\n    minPassingCompletionsAmt,\n    minPassingCompletionPctg,\n    minPassingYardageAmt,\n    minFantasyPoints\n  }\n}\n\nexport function transformQuarterbackGameData(games: QuarterbackGame[]): QuarterbackPerformanceLineChartDatapoint[] {\n  return games.map((game: QuarterbackGame) => ({\n      ...game,\n      passingCompletionPctg: (100 * (game.passingCompletionsAmt / game.passingAttemptsAmt)).toFixed(2)\n    })\n  );\n}\n"]},"metadata":{},"sourceType":"module"}