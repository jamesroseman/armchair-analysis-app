{"ast":null,"code":"export function aggregateQuarterbackGameData(games) {\n  const avgPassingTouchdownsAmt = games.reduce((a, g) => a + g.passingTouchdownsAmt, 0) / games.length;\n  const avgPassingAttemptsAmt = games.reduce((a, g) => a + g.passingAttemptsAmt, 0) / games.length;\n  const avgPassingCompletionsAmt = games.reduce((a, g) => a + g.passingCompletionsAmt, 0) / games.length;\n  const avgPassingCompletionPctg = avgPassingCompletionsAmt / avgPassingAttemptsAmt;\n  const avgPassingYardageAmt = games.reduce((a, g) => a + g.passingYardageAmt, 0) / games.length;\n  const avgFantasyPoints = games.reduce((a, g) => a + g.fantasyPoints, 0) / games.length;\n  const maxPassingTouchdownsAmt = games.reduce((max, g) => Math.max(max, g.passingTouchdownsAmt), games[0].passingTouchdownsAmt);\n  const maxPassingAttemptsAmt = games.reduce((max, g) => Math.max(max, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const maxPassingCompletionsAmt = games.reduce((max, g) => Math.max(max, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const maxPassingCompletionPctg = games.reduce((max, g) => Math.max(max, g.passingCompletionsAmt / g.passingAttemptsAmt), games[0].passingCompletionsAmt / games[0].passingAttemptsAmt);\n  const maxPassingYardageAmt = games.reduce((max, g) => Math.max(max, g.passingYardageAmt), games[0].passingCompletionsAmt);\n  const maxFantasyPoints = games.reduce((max, g) => Math.max(max, g.fantasyPoints), games[0].passingCompletionsAmt);\n  const minPassingTouchdownsAmt = games.reduce((min, g) => Math.min(min, g.passingTouchdownsAmt), games[0].passingTouchdownsAmt);\n  const minPassingAttemptsAmt = games.reduce((min, g) => Math.min(min, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const minPassingCompletionsAmt = games.reduce((min, g) => Math.min(min, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const minPassingCompletionPctg = games.reduce((min, g) => Math.min(min, g.passingCompletionsAmt / g.passingAttemptsAmt), games[0].passingCompletionsAmt / games[0].passingAttemptsAmt);\n  const minPassingYardageAmt = games.reduce((min, g) => Math.min(min, g.passingYardageAmt), games[0].passingCompletionsAmt);\n  const minFantasyPoints = games.reduce((min, g) => Math.min(min, g.fantasyPoints), games[0].passingCompletionsAmt);\n  return {\n    gamesAmt: games.length,\n    // Avg values\n    avgPassingTouchdownsAmt,\n    avgPassingAttemptsAmt,\n    avgPassingCompletionsAmt,\n    avgPassingCompletionPctg,\n    avgPassingYardageAmt,\n    avgFantasyPoints,\n    // Max values\n    maxPassingTouchdownsAmt,\n    maxPassingAttemptsAmt,\n    maxPassingCompletionsAmt,\n    maxPassingCompletionPctg,\n    maxPassingYardageAmt,\n    maxFantasyPoints,\n    // Min values\n    minPassingTouchdownsAmt,\n    minPassingAttemptsAmt,\n    minPassingCompletionsAmt,\n    minPassingCompletionPctg,\n    minPassingYardageAmt,\n    minFantasyPoints\n  };\n}\nexport function transformQuarterbackGameData(games) {\n  return games.map(game => ({ ...game,\n    passingCompletionPctg: (100 * (game.passingCompletionsAmt / game.passingAttemptsAmt)).toFixed(2)\n  }));\n}","map":{"version":3,"sources":["/Users/jroseman/play/football/app/src/transformers/PlayerDashboardDataTransformers.ts"],"names":["aggregateQuarterbackGameData","games","avgPassingTouchdownsAmt","reduce","a","g","passingTouchdownsAmt","length","avgPassingAttemptsAmt","passingAttemptsAmt","avgPassingCompletionsAmt","passingCompletionsAmt","avgPassingCompletionPctg","avgPassingYardageAmt","passingYardageAmt","avgFantasyPoints","fantasyPoints","maxPassingTouchdownsAmt","max","Math","maxPassingAttemptsAmt","maxPassingCompletionsAmt","maxPassingCompletionPctg","maxPassingYardageAmt","maxFantasyPoints","minPassingTouchdownsAmt","min","minPassingAttemptsAmt","minPassingCompletionsAmt","minPassingCompletionPctg","minPassingYardageAmt","minFantasyPoints","gamesAmt","transformQuarterbackGameData","map","game","passingCompletionPctg","toFixed"],"mappings":"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","sourcesContent":["import { QuarterbackGame, QuarterbackPerformanceLineChartDatapoint, QuarterbackDataAggregation } from \"../types/QBDashboardTypes\";\n\nexport function aggregateQuarterbackGameData(games: QuarterbackGame[]): QuarterbackDataAggregation {\n  const avgPassingTouchdownsAmt = games.reduce((a, g) => a + g.passingTouchdownsAmt, 0) / games.length;\n  const avgPassingAttemptsAmt = games.reduce((a, g) => a + g.passingAttemptsAmt, 0) / games.length;\n  const avgPassingCompletionsAmt = games.reduce((a, g) => a + g.passingCompletionsAmt, 0) / games.length;\n  const avgPassingCompletionPctg = avgPassingCompletionsAmt / avgPassingAttemptsAmt;\n  const avgPassingYardageAmt = games.reduce((a, g) => a + g.passingYardageAmt, 0) / games.length;\n  const avgFantasyPoints = games.reduce((a, g) => a + g.fantasyPoints, 0) / games.length;\n\n  const maxPassingTouchdownsAmt = games.reduce((max, g) => Math.max(max, g.passingTouchdownsAmt), games[0].passingTouchdownsAmt);\n  const maxPassingAttemptsAmt = games.reduce((max, g) => Math.max(max, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const maxPassingCompletionsAmt = games.reduce((max, g) => Math.max(max, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const maxPassingCompletionPctg = games.reduce(\n    (max, g) => Math.max(max, g.passingCompletionsAmt / g.passingAttemptsAmt),\n    games[0].passingCompletionsAmt / games[0].passingAttemptsAmt,\n  );\n  const maxPassingYardageAmt = games.reduce((max, g) => Math.max(max, g.passingYardageAmt), games[0].passingCompletionsAmt);\n  const maxFantasyPoints = games.reduce((max, g) => Math.max(max, g.fantasyPoints), games[0].passingCompletionsAmt);\n\n  const minPassingTouchdownsAmt = games.reduce((min, g) => Math.min(min, g.passingTouchdownsAmt), games[0].passingTouchdownsAmt);\n  const minPassingAttemptsAmt = games.reduce((min, g) => Math.min(min, g.passingAttemptsAmt), games[0].passingAttemptsAmt);\n  const minPassingCompletionsAmt = games.reduce((min, g) => Math.min(min, g.passingCompletionsAmt), games[0].passingCompletionsAmt);\n  const minPassingCompletionPctg = games.reduce(\n    (min, g) => Math.min(min, g.passingCompletionsAmt / g.passingAttemptsAmt),\n    games[0].passingCompletionsAmt / games[0].passingAttemptsAmt,\n  );\n  const minPassingYardageAmt = games.reduce((min, g) => Math.min(min, g.passingYardageAmt), games[0].passingCompletionsAmt);\n  const minFantasyPoints = games.reduce((min, g) => Math.min(min, g.fantasyPoints), games[0].passingCompletionsAmt);\n\n  return {\n    gamesAmt: games.length,\n    // Avg values\n    avgPassingTouchdownsAmt,\n    avgPassingAttemptsAmt,\n    avgPassingCompletionsAmt,\n    avgPassingCompletionPctg,\n    avgPassingYardageAmt,\n    avgFantasyPoints,\n    // Max values\n    maxPassingTouchdownsAmt,\n    maxPassingAttemptsAmt,\n    maxPassingCompletionsAmt,\n    maxPassingCompletionPctg,\n    maxPassingYardageAmt,\n    maxFantasyPoints,\n    // Min values\n    minPassingTouchdownsAmt,\n    minPassingAttemptsAmt,\n    minPassingCompletionsAmt,\n    minPassingCompletionPctg,\n    minPassingYardageAmt,\n    minFantasyPoints\n  }\n}\n\nexport function transformQuarterbackGameData(games: QuarterbackGame[]): QuarterbackPerformanceLineChartDatapoint[] {\n  return games.map((game: QuarterbackGame) => ({\n      ...game,\n      passingCompletionPctg: (100 * (game.passingCompletionsAmt / game.passingAttemptsAmt)).toFixed(2)\n    })\n  );\n}\n"]},"metadata":{},"sourceType":"module"}