{"ast":null,"code":"var _jsxFileName = \"/Users/jroseman/play/football/app/src/components/PlayerDashboardGamePerformanceLineChartComponent.tsx\";\nimport React from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nexport default (({\n  data\n}) => {\n  const dataThisSeason = data.filter(g => g.seasonYear === 2019);\n  const transformedDataThisSeason = transformData(dataThisSeason);\n  return /*#__PURE__*/React.createElement(LineChart, {\n    width: 600,\n    height: 300,\n    data: transformedDataThisSeason,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"passingAttemptsAmt\",\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"gameId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"passingAttemptsAmt\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }));\n});\n\nfunction transformData(games) {\n  return games.map(game => ({ ...game,\n    passingCompletionPctg: game.passingCompletionsAmt / game.passingAttemptsAmt\n  }));\n}","map":{"version":3,"sources":["/Users/jroseman/play/football/app/src/components/PlayerDashboardGamePerformanceLineChartComponent.tsx"],"names":["React","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","data","dataThisSeason","filter","g","seasonYear","transformedDataThisSeason","transformData","games","map","game","passingCompletionPctg","passingCompletionsAmt","passingAttemptsAmt"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,aAA1B,EAAyCC,KAAzC,EAAgDC,KAAhD,EAAuDC,OAAvD,QAAsE,UAAtE;AAqBA,gBAAe,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA4D;AACzE,QAAMC,cAAc,GAAGD,IAAI,CAACE,MAAL,CAAaC,CAAD,IAAaA,CAAC,CAACC,UAAF,KAAiB,IAA1C,CAAvB;AACA,QAAMC,yBAAyB,GAAGC,aAAa,CAACL,cAAD,CAA/C;AAEA,sBACE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE,GAAlB;AAAuB,IAAA,MAAM,EAAE,GAA/B;AAAoC,IAAA,IAAI,EAAEI,yBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAC,oBAA9B;AAAmD,IAAA,MAAM,EAAC,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAIE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAKE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD,CAbD;;AAeA,SAASC,aAAT,CAAuBC,KAAvB,EAA4D;AAC1D,SAAOA,KAAK,CAACC,GAAN,CAAWC,IAAD,KAAiB,EAChC,GAAGA,IAD6B;AAEhCC,IAAAA,qBAAqB,EAAED,IAAI,CAACE,qBAAL,GAA6BF,IAAI,CAACG;AAFzB,GAAjB,CAAV,CAAP;AAID","sourcesContent":["import React from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\n\ntype Game = {\n  gameId: string,\n  passingAttemptsAmt: number,\n  passingCompletionsAmt: number,\n  seasonYear: number\n}\n\ntype LineChartDatapoint = {\n  gameId: string,\n  passingAttemptsAmt: number,\n  passingCompletionsAmt: number,\n  passingCompletionPctg: number,\n  seasonYear: number\n}\n\ntype PlayerDashboardGamePerformanceLineChartProps = {\n  data: Game[]\n}\n\nexport default ({ data }: PlayerDashboardGamePerformanceLineChartProps) => {\n  const dataThisSeason = data.filter((g: Game) => g.seasonYear === 2019);\n  const transformedDataThisSeason = transformData(dataThisSeason);\n\n  return (\n    <LineChart width={600} height={300} data={transformedDataThisSeason}>\n      <Line type=\"monotone\" dataKey=\"passingAttemptsAmt\" stroke=\"#8884d8\" />\n      <CartesianGrid stroke=\"#ccc\" />\n      <XAxis dataKey=\"gameId\" />\n      <YAxis dataKey=\"passingAttemptsAmt\" />\n      <Tooltip />\n    </LineChart>\n  )\n}\n\nfunction transformData(games: Game[]): LineChartDatapoint[] {\n  return games.map((game: Game) => ({\n    ...game,\n    passingCompletionPctg: game.passingCompletionsAmt / game.passingAttemptsAmt\n  }))\n}\n"]},"metadata":{},"sourceType":"module"}