{"ast":null,"code":"var _jsxFileName = \"/Users/jroseman/play/football/app/src/containers/PlayerDashboardContainer.tsx\";\nimport React, { useState } from 'react';\nimport { PlayerPosition, SeasonSelection } from '../types/PlayerDashboardTypes';\nimport QBDashboardContainer from '../containers/QBDashboardContainer';\nimport styles from './PlayerDashboardContainer.module.css';\nimport SeasonSelector from '../components/SeasonSelectorComponent';\nimport PerformanceLineChartComponent from '../components/PerformanceLineChartComponent';\nconst ONE_SEASON = [2019];\nconst THREE_SEASONS = [2019, 2018, 2017];\nexport default (({\n  player\n}) => {\n  const [playerState, setPlayerState] = useState(player);\n  const [isGeneralStatsCollapsed, setIsGeneralStatsCollapsed] = useState(false);\n  const {\n    firstName,\n    lastName,\n    primaryPosition\n  } = player.demographicData;\n  const oneSeasonGames = player.playerGames.filter(game => ONE_SEASON.includes(game.seasonYear));\n  const threeSeasonGames = player.playerGames.filter(game => THREE_SEASONS.includes(game.seasonYear));\n  const selectionGameMap = {\n    [SeasonSelection.One]: oneSeasonGames,\n    [SeasonSelection.Three]: threeSeasonGames,\n    [SeasonSelection.Lifetime]: player.playerGames\n  };\n\n  const onStateChange = selection => {\n    setPlayerState({ ...playerState,\n      playerGames: selectionGameMap[selection]\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, firstName, \" \", lastName, \" \", primaryPosition, \" Dashboard\"), /*#__PURE__*/React.createElement(SeasonSelector, {\n    onStateChange: onStateChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.generalStats,\n    onClick: () => setIsGeneralStatsCollapsed(!isGeneralStatsCollapsed),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"General Stats\"), /*#__PURE__*/React.createElement(PerformanceLineChartComponent, {\n    data: formatGamesForPerfLineChart(playerState).data,\n    lines: formatGamesForPerfLineChart(playerState).lines,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), renderDashboard(playerState));\n});\n\nfunction renderDashboard(player) {\n  const {\n    primaryPosition\n  } = player.demographicData;\n\n  if (primaryPosition === PlayerPosition.Quarterback) {\n    return /*#__PURE__*/React.createElement(QBDashboardContainer, {\n      player: player,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    });\n  } // else if (primaryPosition === PlayerPosition.Runningback) {\n  //   return <RBDashboardContainer player={player} />\n  // }\n\n}\n\nfunction formatGamesForPerfLineChart({\n  playerGames\n}) {\n  const avgFantasyPoints = playerGames.reduce((a, g) => a + g.fantasyPoints, 0) / playerGames.length;\n  const data = playerGames.map(game => ({\n    fantasyPoints: game.fantasyPoints,\n    avgFantasyPoints\n  }));\n  const dataWithFantasyAvg = data.map(datapoint => ({ ...datapoint,\n    avgFantasyPoints\n  }));\n  const lines = [{\n    dataKey: \"fantasyPoints\",\n    color: \"green\"\n  }, {\n    dataKey: \"avgFantasyPoints\",\n    color: \"orange\"\n  }];\n  return {\n    data: dataWithFantasyAvg,\n    lines\n  };\n}","map":{"version":3,"sources":["/Users/jroseman/play/football/app/src/containers/PlayerDashboardContainer.tsx"],"names":["React","useState","PlayerPosition","SeasonSelection","QBDashboardContainer","styles","SeasonSelector","PerformanceLineChartComponent","ONE_SEASON","THREE_SEASONS","player","playerState","setPlayerState","isGeneralStatsCollapsed","setIsGeneralStatsCollapsed","firstName","lastName","primaryPosition","demographicData","oneSeasonGames","playerGames","filter","game","includes","seasonYear","threeSeasonGames","selectionGameMap","One","Three","Lifetime","onStateChange","selection","header","generalStats","formatGamesForPerfLineChart","data","lines","renderDashboard","Quarterback","avgFantasyPoints","reduce","a","g","fantasyPoints","length","map","dataWithFantasyAvg","datapoint","dataKey","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Player, PlayerPosition, SeasonSelection } from '../types/PlayerDashboardTypes';\nimport QBDashboardContainer from '../containers/QBDashboardContainer';\nimport styles from './PlayerDashboardContainer.module.css';\nimport SeasonSelector from '../components/SeasonSelectorComponent';\nimport PerformanceLineChartComponent from '../components/PerformanceLineChartComponent';\n\ntype PlayerDashboardProps = {\n  player: Player\n}\n\nconst ONE_SEASON = [2019];\nconst THREE_SEASONS = [2019, 2018, 2017];\n\nexport default ({ player }: PlayerDashboardProps) => {\n  const [playerState, setPlayerState] = useState<Player>(player);\n  const [isGeneralStatsCollapsed, setIsGeneralStatsCollapsed] = useState<boolean>(false);\n\n  const { firstName, lastName, primaryPosition } = player.demographicData;\n  const oneSeasonGames = player.playerGames.filter((game) => ONE_SEASON.includes(game.seasonYear));\n  const threeSeasonGames = player.playerGames.filter((game) => THREE_SEASONS.includes(game.seasonYear));\n  const selectionGameMap = {\n    [SeasonSelection.One]: oneSeasonGames,\n    [SeasonSelection.Three]: threeSeasonGames,\n    [SeasonSelection.Lifetime]: player.playerGames\n  };\n\n  const onStateChange = ((selection: SeasonSelection) => {\n    setPlayerState({\n      ...playerState,\n      playerGames: selectionGameMap[selection]\n    } as Player);\n  })\n\n  return (\n    <div>\n      <div className={styles.header}>\n        <h1>{firstName} {lastName} {primaryPosition} Dashboard</h1>\n        <SeasonSelector onStateChange={onStateChange} />\n      </div>\n      <div className={styles.generalStats} onClick={() => setIsGeneralStatsCollapsed(!isGeneralStatsCollapsed)}>\n        <h2>General Stats</h2>\n        <PerformanceLineChartComponent data={formatGamesForPerfLineChart(playerState).data} lines={formatGamesForPerfLineChart(playerState).lines} />\n      </div>\n      {renderDashboard(playerState)}\n    </div>\n  )\n}\n\nfunction renderDashboard(player: Player) {\n  const { primaryPosition } = player.demographicData;\n  if (primaryPosition === PlayerPosition.Quarterback) {\n    return <QBDashboardContainer player={player} />\n  }\n  // else if (primaryPosition === PlayerPosition.Runningback) {\n  //   return <RBDashboardContainer player={player} />\n  // }\n}\n\n\nfunction formatGamesForPerfLineChart({ playerGames }: Player) {\n  const avgFantasyPoints = playerGames.reduce((a, g) => a + g.fantasyPoints, 0) / playerGames.length;\n  const data = playerGames.map((game) => ({\n    fantasyPoints: game.fantasyPoints,\n    avgFantasyPoints\n  }))\n  const dataWithFantasyAvg = data.map((datapoint) => ({\n    ...datapoint,\n    avgFantasyPoints\n  }))\n  const lines = [\n    {\n      dataKey: \"fantasyPoints\",\n      color: \"green\"\n    },\n    {\n      dataKey: \"avgFantasyPoints\",\n      color: \"orange\"\n    }\n  ];\n  return { data: dataWithFantasyAvg, lines }\n}\n"]},"metadata":{},"sourceType":"module"}