{"version":3,"sources":["types/ModelConstantTypes.ts","components/PredictionAccuracyResultsComponent.tsx","utils/SchedulePredictionUtils.ts","utils/TeamNameUtils.ts","utils/TimeUtils.ts","components/TeamLogoImageComponent.tsx","components/TeamMatchupBoxComponent.tsx","containers/AllSchedulePredictionsContainer.tsx","queries/GetSchedulePredictionsQuery.tsx","renderers/AllSchedulePredictionsRenderer.tsx","App.tsx","serviceWorker.ts","lib/apollo.ts","index.tsx","containers/AllSchedulePredictionsContainer.module.css","components/PredictionAccuracyResultsComponent.module.css","components/TeamMatchupBoxComponent.module.css","App.module.css"],"names":["Day","Conditions","Surface","TeamName","accuracy","confidenceLimit","handleConfidenceLimitSliderEvent","predictionsAmt","confidentPredictionsAmt","againstTheSpreadPredictionsAmt","correctPredictionsAmt","correctConfidentPredictionsAmt","correctAgainstTheSpreadPredictionsAmt","predictionsGuessRate","confidentPredictionsGuessRate","againstTheSpreadPredictionsGuessRate","className","styles","toFixed","type","min","max","value","onChange","SchedulePredictionUtils","schedulePrediction","game","visitingTeamEloWinExp","homeTeamEloWinExp","pointsScoredVisitorAmt","pointsScoredHomeAmt","visitorPointSpreadNo","schedulePredictions","reduce","agg","didPredictCorrectly","isPredictionCorrect","isConfidentPrediction","isPredictionConfident","isAgainstTheSpreadPrediction","isPredictionAgainstTheSpread","sp","trimmedDate","date","split","hasOwnProperty","weekNumber","TeamNameUtils","teamName","ArizonaCardinals","AtlantaFalcons","BaltimoreRavens","BuffaloBills","CarolinaPanthers","ChicagoBears","CincinnatiBengals","ClevelandBrowns","DallasCowboys","DenverBroncos","DetroitLions","GreenBayPackers","HoustonTexans","IndianapolisColts","JacksonvilleJaguars","KansasCityChiefs","LasVegasRaiders","LosAngelesChargers","LosAngelesRams","MiamiDolphins","MinnesotaVikings","NewEnglandPatriots","NewOrleansSaints","NewYorkGiants","NewYorkJets","PhiladelphiaEagles","PittsburghSteelers","SanFrancisco49ers","SeattleSeahawks","TampaBayBuccaneers","TennesseeTitans","WashingtonRedskins","TimeUtils","dateStr","rawTime","rawHour","parseInt","hour","rawMinute","minute","amPm","dayOfWeek","includeYear","dayStr","getPrintableDayFromDayOfWeek","Date","monthStr","getAbbrPrintableMonthFromDate","yearStr","getFullYear","getDate","day","Monday","Tuesday","Saturday","Sunday","Thursday","getMonth","width","height","alt","src","getImageSrcFromTeamName","shouldHighlight","isCorrect","hasOccurred","visitingTeamName","homeTeamName","isScheduled","hasPredictionOccurred","didVisitorWin","didHomeWin","undefined","homePointSpreadNo","cardClassNames","key","scheduleId","timeStr","getPrintableTimeFromDate","header","renderTableHeader","renderTableRowForTeam","winExp","didWin","pointSpread","pointsScored","winExpStr","TeamLogoImageComponent","getPrintableNameFromTeamName","length","useState","setConfidenceLimit","shouldOnlyDisplayConfidentPredictions","setShouldOnlyDisplayConfidentPredictions","confidentPredictions","filter","predictions","weekNumberToSchedulePredictionsMap","getWeekNumberToSchedulePredictionsMap","sequentialWeekNumbers","Object","keys","currentWeek","pop","getAccuracyFromSchedulePredictions","PredictionAccuracyResultsComponent","event","newConfidenceLimitStr","target","toString","newConfidenceLimit","parseFloat","checked","renderMatchupsForWeeks","weekNumbers","map","dateToSchedulePredictionsMap","getDateToSchedulePredictionsMap","dates","Math","random","printableDate","getPrintableDateFromDateAndDayOfWeek","TeamMatchupBoxComponent","renderSchedulePredictionRow","renderMatchupsForWeek","GetSchedulePredictionsQuery","gql","query","loading","data","AllSchedulePredictionsContainer","SchedulePredictionDashboardContainerRoute","schedulePredictionId","useParams","App","exact","path","AllSchedulePredictionsRenderer","Boolean","window","location","hostname","match","ApolloClient","uri","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.2cea8a97.chunk.js","sourcesContent":["export enum Day {\n  Sunday = 'SUN',\n  Monday = 'MN',\n  Tuesday = \"TUE\",\n  Thursday = 'THU',\n  Saturday = 'SN'\n}\n\nexport enum Conditions {\n  Cold = 'Cold',\n  ClosedRoof = 'Closed Roof',\n  Dome = 'Dome',\n  Flurries = 'Flurries',\n  LightSnow = 'Light Snow',\n  Snow = 'Snow',\n  ChanceRain = 'Chance Rain',\n  LightRain = 'Light Rain',\n  Rain = 'Rain',\n  MostlyCloudy = 'Mostly Cloudy',\n  PartlyCloudy = 'Partly Cloudy',\n  Cloudy = 'Cloudy',\n  MostlySunny = 'Mostly Sunny',\n  PartlySunny = 'Partly Sunny',\n  Sunny = 'Sunny',\n  Hazy = 'Hazy',\n  Foggy = 'Foggy',\n  Clear = 'Clear',\n  Fair = 'Fair'\n}\n\nexport enum Surface {\n  Grass = 'Grass',\n  AstroTurf = 'AstroTurf',\n  AstroPlay = 'AstroPlay',\n  FieldTurf = 'FieldTurf',\n  SportGrass = 'SportGrass',\n  NeXTurf = 'NeXTurf',\n  MomentumTurf = 'MomentumTurf',\n  DDGrassMaster = 'DD GrassMaster',\n  Sportex = 'Sportex',\n  ATurfTitan = 'A Turf Titan',\n  UBUSpeedSeriesS5M = 'UBU Speed Series S5M'\n}\n\nexport enum TeamName {\n  ArizonaCardinals = 'ARI',\n  AtlantaFalcons = 'ATL',\n  BaltimoreRavens = 'BAL',\n  BuffaloBills = 'BUF',\n  CarolinaPanthers = 'CAR',\n  ChicagoBears = 'CHI',\n  CincinnatiBengals = 'CIN',\n  ClevelandBrowns = 'CLE',\n  DallasCowboys = 'DAL',\n  DenverBroncos = 'DEN',\n  DetroitLions = 'DET',\n  GreenBayPackers = 'GB',\n  HoustonTexans = 'HOU',\n  IndianapolisColts = 'IND',\n  JacksonvilleJaguars = 'JAC',\n  KansasCityChiefs = 'KC',\n  LosAngelesRams = 'LA',\n  LosAngelesChargers = 'LAC',\n  LasVegasRaiders = 'LV',\n  MiamiDolphins = 'MIA',\n  MinnesotaVikings = 'MIN',\n  NewEnglandPatriots = 'NE',\n  NewOrleansSaints = 'NO',\n  NewYorkGiants = 'NYG',\n  NewYorkJets = 'NYJ',\n  OaklandRaiders = 'OAK',\n  PhiladelphiaEagles = 'PHI',\n  PittsburghSteelers = 'PIT',\n  SanDiegoChargers = 'SD',\n  SeattleSeahawks = 'SEA',\n  SanFrancisco49ers = 'SF',\n  StLouisRams = 'STL',\n  TampaBayBuccaneers = 'TB',\n  TennesseeTitans = 'TEN',\n  WashingtonRedskins = 'WAS'\n}","import React from \"react\";\nimport { SchedulePredictionsAccuracy } from \"../types/SchedulePredictionTypes\"\nimport styles from \"./PredictionAccuracyResultsComponent.module.css\";\n\ntype PredictionAccuracyResultsProps = {\n  accuracy: SchedulePredictionsAccuracy,\n  confidenceLimit: number,\n  handleConfidenceLimitSliderEvent: (event: React.ChangeEvent) => void,\n}\n\nexport default ({ accuracy, confidenceLimit, handleConfidenceLimitSliderEvent }: PredictionAccuracyResultsProps) => {\n  const { \n    predictionsAmt,\n    confidentPredictionsAmt,\n    againstTheSpreadPredictionsAmt,\n    correctPredictionsAmt,\n    correctConfidentPredictionsAmt,\n    correctAgainstTheSpreadPredictionsAmt,\n    predictionsGuessRate,\n    confidentPredictionsGuessRate,\n    againstTheSpreadPredictionsGuessRate\n  } = accuracy;\n\n  return (\n    <div>\n      <div>\n        <div className={styles['results-card']}>\n          <table className={styles['results-header']}>\n            <thead>\n              <tr className={styles['tr']}>\n                <th className={styles['title']}></th>\n                <th className={styles['th']}>Correct Predictions</th>\n                <th className={styles['th']}>Predictions</th>\n                <th className={styles['th']}>Guess Rate</th>\n                <th className={styles['th']}>Confidence Limit</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr className={styles['tr']}>\n                <td className={`${styles['td']} ${styles['title']}`}>Predictions</td>\n                <td className={`${styles['td']} ${styles['data']}`}>{correctPredictionsAmt}</td>\n                <td className={`${styles['td']} ${styles['data']}`}>{predictionsAmt}</td>\n                <td className={`${styles['td']} ${styles['data']}`}>{(predictionsGuessRate * 100).toFixed(1)}%</td>\n                <td className={`${styles['td']} ${styles['data']} ${styles['confidence-limit']}`}>{confidenceLimit.toFixed(1)}%</td>\n              </tr>\n              <tr className={styles['tr']}>\n                <td className={`${styles['td']} ${styles['title']}`}>Confident Predictions</td>\n                <td className={`${styles['td']} ${styles['data']}`}>{correctConfidentPredictionsAmt}</td>\n                <td className={`${styles['td']} ${styles['data']}`}>{confidentPredictionsAmt}</td>\n                <td className={`${styles['td']} ${styles['data']}`}>{(confidentPredictionsGuessRate * 100).toFixed(1)}%</td>\n              </tr>\n              <tr className={styles['tr']}>\n                <td className={`${styles['td']} ${styles['title']}`}>Against the Spread Predictions</td>\n                <td className={`${styles['td']} ${styles['data']}`}>{correctAgainstTheSpreadPredictionsAmt}</td>\n                <td className={`${styles['td']} ${styles['data']}`}>{againstTheSpreadPredictionsAmt}</td>\n                <td className={`${styles['td']} ${styles['data']}`}>{(againstTheSpreadPredictionsGuessRate * 100).toFixed(1)}%</td>\n              </tr>\n            </tbody>\n          </table>\n          <div className={styles['confidence-limit-slider']} >\n            <input \n              type=\"range\" \n              min=\"500\" \n              max=\"1000\" \n              value={confidenceLimit * 10} \n              onChange={handleConfidenceLimitSliderEvent} \n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","import { SchedulePrediction, SchedulePredictionsAccuracy } from \"../types/SchedulePredictionTypes\";\n\nexport type DateToSchedulePredictionsMap = {\n  [date: string]: SchedulePrediction[]\n}\n\nexport type WeekNumberToSchedulePredictionsMap = {\n  [weekNumber: string]: SchedulePrediction[]\n}\n\nexport class SchedulePredictionUtils {\n\n  /**\n   * Determine whether or not a predicted game has occurred.\n   */\n  public static hasPredictionOccurred(\n    schedulePrediction: SchedulePrediction\n  ): boolean {\n    return schedulePrediction.game !== null && typeof(schedulePrediction.game) !== \"undefined\";\n  }\n\n  /**\n   * Determine whether or not a prediction was accurate.\n   */\n  public static isPredictionCorrect(\n    schedulePrediction: SchedulePrediction,\n  ): boolean {\n    if (schedulePrediction.game === null || typeof(schedulePrediction.game) === \"undefined\") {\n      return false;\n    }\n    const { game, visitingTeamEloWinExp, homeTeamEloWinExp } = schedulePrediction;\n    const { pointsScoredVisitorAmt, pointsScoredHomeAmt } = game;\n    const didVisitorWin: boolean = pointsScoredVisitorAmt > pointsScoredHomeAmt;\n    const didHomeWin: boolean = pointsScoredHomeAmt > pointsScoredVisitorAmt;\n    const didPredictVisitorWin: boolean = visitingTeamEloWinExp > 0.50;\n    const didPredictHomeWin: boolean = homeTeamEloWinExp > 0.50;\n    return (didVisitorWin && didPredictVisitorWin) || (didHomeWin && didPredictHomeWin);\n  }\n\n  /**\n   * Determine whether or not a prediction can be considered \"confident\" based\n   * on a win expectation limit.\n   * @param confidenceLimit The win expectation limit at which a prediction is considered \"confident\". (0-1)\n   */\n  public static isPredictionConfident(\n    schedulePrediction: SchedulePrediction,\n    confidenceLimit: number\n  ): boolean {\n    const { visitingTeamEloWinExp, homeTeamEloWinExp } = schedulePrediction;\n    return visitingTeamEloWinExp >= confidenceLimit || homeTeamEloWinExp >= confidenceLimit;\n  }\n\n  /**\n   * Determine whether or not a prediction is the opposite of the betting line of that\n   * game. Can only be computed retroactively, so scheduled games are always false.\n   */\n  public static isPredictionAgainstTheSpread(\n    schedulePrediction: SchedulePrediction\n  ): boolean {\n    const { visitingTeamEloWinExp, homeTeamEloWinExp, game } = schedulePrediction;\n    if (game === null || typeof(game) === \"undefined\") {\n      return false;\n    }\n    const { visitorPointSpreadNo } = game;\n    const didPredictVisitingWin: boolean = visitingTeamEloWinExp > 0.5;\n    const didPredictHomeWin: boolean = homeTeamEloWinExp > 0.5;\n    // A negative point spread indicates the team was favored to win.\n    return (visitorPointSpreadNo < 0 && didPredictHomeWin) || (visitorPointSpreadNo > 0 && didPredictVisitingWin);\n  }\n\n  /**\n   * Compute the accuracy over a series of SchedulePredictions.\n   * @param confidenceLimit The win expectation limit at which a prediction is considered \"confident\". (0-1)\n   */\n  public static getAccuracyFromSchedulePredictions(\n    schedulePredictions: SchedulePrediction[],\n    confidenceLimit: number\n  ): SchedulePredictionsAccuracy {\n    const accuracy: SchedulePredictionsAccuracy = schedulePredictions.reduce(\n      (agg: SchedulePredictionsAccuracy, schedulePrediction: SchedulePrediction) => {\n        if (schedulePrediction.game !== null && typeof(schedulePrediction.game) !== \"undefined\") {\n          const didPredictCorrectly: boolean = SchedulePredictionUtils.isPredictionCorrect(schedulePrediction);\n          const isConfidentPrediction: boolean = SchedulePredictionUtils.isPredictionConfident(schedulePrediction, confidenceLimit);\n          const isAgainstTheSpreadPrediction: boolean = SchedulePredictionUtils.isPredictionAgainstTheSpread(schedulePrediction);\n\n          // Add the counts\n          agg.predictionsAmt += 1;\n          if (didPredictCorrectly) {\n            agg.correctPredictionsAmt += 1;\n          }\n          if (isConfidentPrediction) {\n            agg.confidentPredictionsAmt += 1;\n          }\n          if (didPredictCorrectly && isConfidentPrediction) {\n            agg.correctConfidentPredictionsAmt += 1;\n          }\n          if (isAgainstTheSpreadPrediction) {\n            agg.againstTheSpreadPredictionsAmt += 1;\n          }\n          if (isAgainstTheSpreadPrediction && didPredictCorrectly) {\n            agg.correctAgainstTheSpreadPredictionsAmt += 1;\n          }\n        }\n        return agg;\n      },\n      {\n        predictionsAmt: 0,\n        correctPredictionsAmt: 0,\n        confidentPredictionsAmt: 0,\n        correctConfidentPredictionsAmt: 0,\n        againstTheSpreadPredictionsAmt: 0,\n        correctAgainstTheSpreadPredictionsAmt: 0\n      } as SchedulePredictionsAccuracy\n    );\n    const { \n      predictionsAmt, \n      correctPredictionsAmt,\n      confidentPredictionsAmt, \n      correctConfidentPredictionsAmt,\n      againstTheSpreadPredictionsAmt,\n      correctAgainstTheSpreadPredictionsAmt\n    } = accuracy;\n    accuracy.predictionsGuessRate = correctPredictionsAmt / (predictionsAmt > 0 ? predictionsAmt : 1);\n    accuracy.confidentPredictionsGuessRate = correctConfidentPredictionsAmt / (confidentPredictionsAmt > 0 ? confidentPredictionsAmt : 1);\n    accuracy.againstTheSpreadPredictionsGuessRate = correctAgainstTheSpreadPredictionsAmt / (againstTheSpreadPredictionsAmt > 0 ? againstTheSpreadPredictionsAmt : 1);\n    return accuracy;\n  }\n\n  /**\n   * Group SchedulePredictions by their date-strings (without time).\n   */\n  public static getDateToSchedulePredictionsMap(\n    schedulePredictions: SchedulePrediction[]\n  ): DateToSchedulePredictionsMap {\n    return schedulePredictions.reduce(\n      (agg: DateToSchedulePredictionsMap, sp: SchedulePrediction) => {\n        const trimmedDate: string = sp.date.split(' ')[0];\n        if (!agg.hasOwnProperty(trimmedDate)) {\n          agg[trimmedDate] = [];\n        }\n        return {\n          ...agg,\n          [trimmedDate]: [ ...agg[trimmedDate], sp ],\n        }\n      },\n      {}\n    );\n  }\n\n  /**\n   * Group SchedulePredictions by their week numbers.\n   */\n  public static getWeekNumberToSchedulePredictionsMap(\n    schedulePredictions: SchedulePrediction[]\n  ): WeekNumberToSchedulePredictionsMap {\n    return schedulePredictions.reduce(\n      (agg: WeekNumberToSchedulePredictionsMap, sp: SchedulePrediction) => {\n        if (!agg.hasOwnProperty(sp.weekNumber)) {\n          agg[sp.weekNumber] = [];\n        }\n        return {\n          ...agg,\n          [sp.weekNumber]: [ ...agg[sp.weekNumber], sp ],\n        }\n      },\n      {}\n    );\n  }\n\n}","import { TeamName } from \"../types/ModelConstantTypes\";\n\nexport class TeamNameUtils {\n  /**\n   * Get printable string from the TeamName.\n   */\n  public static getPrintableNameFromTeamName(teamName: TeamName): string {\n    switch(teamName) {\n      case TeamName.ArizonaCardinals: {\n        return 'Cardinals';\n      }\n      case TeamName.AtlantaFalcons: {\n        return 'Falcons';\n      }\n      case TeamName.BaltimoreRavens: {\n        return 'Ravens';\n      }\n      case TeamName.BuffaloBills: {\n        return 'Bills';\n      }\n      case TeamName.CarolinaPanthers: {\n        return 'Panthers';\n      }\n      case TeamName.ChicagoBears: {\n        return 'Bears';\n      }\n      case TeamName.CincinnatiBengals: {\n        return 'Bengals';\n      }\n      case TeamName.ClevelandBrowns: {\n        return 'Browns';\n      }\n      case TeamName.DallasCowboys: {\n        return 'Cowboys';\n      }\n      case TeamName.DenverBroncos: {\n        return 'Broncos';\n      }\n      case TeamName.DetroitLions: {\n        return 'Lions';\n      }\n      case TeamName.GreenBayPackers: {\n        return 'Packers';\n      }\n      case TeamName.HoustonTexans: {\n        return 'Texans';\n      }\n      case TeamName.IndianapolisColts: {\n        return 'Colts';\n      }\n      case TeamName.JacksonvilleJaguars: {\n        return 'Jaguars';\n      }\n      case TeamName.KansasCityChiefs: {\n        return 'Chiefs';\n      }\n      case TeamName.LasVegasRaiders: {\n        return 'Raiders';\n      }\n      case TeamName.LosAngelesChargers: {\n        return 'Chargers';\n      }\n      case TeamName.LosAngelesRams: {\n        return 'Rams';\n      }\n      case TeamName.MiamiDolphins: {\n        return 'Dolphins';\n      }\n      case TeamName.MinnesotaVikings: {\n        return 'Vikings';\n      }\n      case TeamName.NewEnglandPatriots: {\n        return 'Patriots';\n      }\n      case TeamName.NewOrleansSaints: {\n        return 'Saints';\n      }\n      case TeamName.NewYorkGiants: {\n        return 'Giants';\n      }\n      case TeamName.NewYorkJets: {\n        return 'Jets';\n      }\n      case TeamName.PhiladelphiaEagles: {\n        return 'Eagles';\n      }\n      case TeamName.PittsburghSteelers: {\n        return 'Steelers';\n      }\n      case TeamName.SanFrancisco49ers: {\n        return '49ers';\n      }\n      case TeamName.SeattleSeahawks: {\n        return 'Seahawks';\n      }\n      case TeamName.TampaBayBuccaneers: {\n        return 'Buccaneers';\n      }\n      case TeamName.TennesseeTitans: {\n        return 'Titans';\n      }\n      case TeamName.WashingtonRedskins: {\n        return 'Washington';\n      }\n      default: {\n        return 'Unknown Team';\n      }\n    }\n  }\n\n  /**\n   * Get the image src string from the TeamName.\n   */\n  public static getImageSrcFromTeamName(teamName: TeamName): string {\n    switch(teamName) {\n      case TeamName.ArizonaCardinals: {\n        return './nfl_teams/arizona_cardinals.png';\n      }\n      case TeamName.AtlantaFalcons: {\n        return './nfl_teams/atlanta_falcons.png';\n      }\n      case TeamName.BaltimoreRavens: {\n        return './nfl_teams/baltimore_ravens.png';\n      }\n      case TeamName.BuffaloBills: {\n        return './nfl_teams/buffalo_bills.png';\n      }\n      case TeamName.CarolinaPanthers: {\n        return './nfl_teams/carolina_panthers.png';\n      }\n      case TeamName.ChicagoBears: {\n        return './nfl_teams/chicago_bears.png';\n      }\n      case TeamName.CincinnatiBengals: {\n        return './nfl_teams/cincinnati_bengals.png';\n      }\n      case TeamName.ClevelandBrowns: {\n        return './nfl_teams/cleveland_browns.png';\n      }\n      case TeamName.DallasCowboys: {\n        return './nfl_teams/dallas_cowboys.png';\n      }\n      case TeamName.DenverBroncos: {\n        return './nfl_teams/denver_broncos.png';\n      }\n      case TeamName.DetroitLions: {\n        return './nfl_teams/detroit_lions.png';\n      }\n      case TeamName.GreenBayPackers: {\n        return './nfl_teams/green_bay_packers.png';\n      }\n      case TeamName.HoustonTexans: {\n        return './nfl_teams/houston_texans.png';\n      }\n      case TeamName.IndianapolisColts: {\n        return './nfl_teams/indianapolis_colts.png';\n      }\n      case TeamName.JacksonvilleJaguars: {\n        return './nfl_teams/jacksonville_jaguars.png';\n      }\n      case TeamName.KansasCityChiefs: {\n        return './nfl_teams/kansas_city_chiefs.png';\n      }\n      case TeamName.LasVegasRaiders: {\n        return './nfl_teams/las_vegas_raiders.png';\n      }\n      case TeamName.LosAngelesChargers: {\n        return './nfl_teams/los_angeles_chargers.png';\n      }\n      case TeamName.LosAngelesRams: {\n        return './nfl_teams/los_angeles_rams.png';\n      }\n      case TeamName.MiamiDolphins: {\n        return './nfl_teams/miami_dolphins.png';\n      }\n      case TeamName.MinnesotaVikings: {\n        return './nfl_teams/minnesota_vikings.png';\n      }\n      case TeamName.NewEnglandPatriots: {\n        return './nfl_teams/new_england_patriots.png';\n      }\n      case TeamName.NewOrleansSaints: {\n        return './nfl_teams/new_orleans_saints.png';\n      }\n      case TeamName.NewYorkGiants: {\n        return './nfl_teams/new_york_giants.png';\n      }\n      case TeamName.NewYorkJets: {\n        return './nfl_teams/new_york_jets.png';\n      }\n      case TeamName.PhiladelphiaEagles: {\n        return './nfl_teams/philadelphia_eagles.png';\n      }\n      case TeamName.PittsburghSteelers: {\n        return './nfl_teams/pittsburgh_steelers.png';\n      }\n      case TeamName.SanFrancisco49ers: {\n        return './nfl_teams/san_francisco_49ers.png';\n      }\n      case TeamName.SeattleSeahawks: {\n        return './nfl_teams/seattle_seahawks.png';\n      }\n      case TeamName.TampaBayBuccaneers: {\n        return './nfl_teams/tampa_bay_buccaneers.png';\n      }\n      case TeamName.TennesseeTitans: {\n        return './nfl_teams/tennessee_titans.png';\n      }\n      case TeamName.WashingtonRedskins: {\n        return './nfl_teams/washington_football_team.png';\n      }\n      default: {\n        return './nfl_teams/nfl_league.png';\n      }\n    }\n  }\n}","import { Day } from \"../types/ModelConstantTypes\";\n\nexport class TimeUtils {\n  /**\n   * Get the printable time string of a date string.\n   */\n  public static getPrintableTimeFromDate(\n    dateStr: string,\n  ): string {\n    const rawTime: string = dateStr.split(\" \")[1];\n    const rawHour: number = parseInt(rawTime.split(\":\")[0]);\n    const hour: number = rawHour <= 12 ? rawHour : rawHour - 12;\n    const rawMinute: number = parseInt(rawTime.split(\":\")[1]);\n    const minute: string = rawMinute > 0 && rawMinute > 10 \n    ? `:${rawMinute}` \n    : rawMinute > 0\n    ? `:0${rawMinute}`\n    :\"\";\n    const amPm: string = rawHour < 12 ? \"a.m.\" : \"p.m.\";\n    return `${hour}${minute}${amPm} Eastern`;\n  }\n\n  /**\n   * Get the printable string of a Date and Day. (\"Thursday, Nov. 9\")\n   */\n  public static getPrintableDateFromDateAndDayOfWeek(\n    dateStr: string,\n    dayOfWeek: Day,\n    includeYear: boolean = false\n  ): string {\n    const dayStr: string = TimeUtils.getPrintableDayFromDayOfWeek(dayOfWeek);\n    const date: Date = new Date(dateStr);\n    const monthStr: string = TimeUtils.getAbbrPrintableMonthFromDate(date);\n    const yearStr: string = includeYear ? `, ${date.getFullYear()}` : \"\";\n    return `${dayStr}, ${monthStr} ${date.getDate()}${yearStr}`;\n  }\n\n  /**\n   * Get the printable string of a Day.\n   */\n  public static getPrintableDayFromDayOfWeek(day: Day): string {\n    switch(day) {\n      case Day.Monday: {\n        return \"Monday\";\n      }\n      case Day.Tuesday: {\n        return \"Tuesday\";\n      }\n      case Day.Saturday: {\n        return \"Saturday\";\n      }\n      case Day.Sunday: {\n        return \"Sunday\";\n      }\n      case Day.Thursday: {\n        return \"Thursday\";\n      }\n      default: {\n        return \"UnknownDay\";\n      }\n    }\n  }\n\n/**\n   * Get the abbreviated printable month of a Date.\n   */\n  public static getAbbrPrintableMonthFromDate(date: Date): string {\n    switch(date.getMonth() + 1) {\n      case 1: {\n        return \"Jan.\";\n      }\n      case 2: {\n        return \"Feb.\";\n      }\n      case 3: {\n        return \"Mar.\";\n      }\n      case 4: {\n        return \"April\";\n      }\n      case 5: {\n        return \"May\";\n      }\n      case 6: {\n        return \"June\";\n      }\n      case 7: {\n        return \"July\";\n      }\n      case 8: {\n        return \"Aug.\";\n      }\n      case 9: {\n        return \"Sept.\";\n      }\n      case 10: {\n        return \"Oct.\";\n      }\n      case 11: {\n        return \"Nov.\";\n      }\n      case 12: {\n        return \"Dec.\";\n      }\n      default: {\n        return \"UnkownAbbrMonth\";\n      }\n    }\n  }\n\n  /**\n   * Get the printable month of a Date.\n   */\n  public static getPrintableMonthFromDate(date: Date): string {\n    switch(date.getMonth() + 1) {\n      case 1: {\n        return \"January\";\n      }\n      case 2: {\n        return \"February\";\n      }\n      case 3: {\n        return \"March\";\n      }\n      case 4: {\n        return \"April\";\n      }\n      case 5: {\n        return \"May\";\n      }\n      case 6: {\n        return \"June\";\n      }\n      case 7: {\n        return \"July\";\n      }\n      case 8: {\n        return \"August\";\n      }\n      case 9: {\n        return \"September\";\n      }\n      case 10: {\n        return \"October\";\n      }\n      case 11: {\n        return \"November\";\n      }\n      case 12: {\n        return \"December\";\n      }\n      default: {\n        return \"UnkownMonth\";\n      }\n    }\n  }\n}","import React from 'react';\nimport { TeamName } from '../types/ModelConstantTypes';\nimport { TeamNameUtils } from '../utils/TeamNameUtils';\n\ntype TeamLogoImageComponentProps = {\n  teamName: TeamName,\n  width?: number,\n  height?: number\n}\n\nexport default ({ teamName, width, height }: TeamLogoImageComponentProps) => {\n  return (\n    <img width={width} height={height} alt={`${teamName} Logo`} src={TeamNameUtils.getImageSrcFromTeamName(teamName)} />\n  );\n}\n","import React from 'react';\nimport { TeamName } from '../types/ModelConstantTypes';\nimport { SchedulePrediction } from '../types/SchedulePredictionTypes';\nimport { SchedulePredictionUtils } from '../utils/SchedulePredictionUtils';\nimport { TeamNameUtils } from '../utils/TeamNameUtils';\nimport { TimeUtils } from '../utils/TimeUtils';\nimport TeamLogoImageComponent from './TeamLogoImageComponent';\nimport styles from './TeamMatchupBoxComponent.module.css';\n\ntype TeamMatchupBoxComponentProps = {\n  schedulePrediction: SchedulePrediction,\n  shouldHighlight?: boolean,\n  isCorrect?: boolean,\n  hasOccurred?: boolean\n}\n\nexport default ({ schedulePrediction, shouldHighlight, isCorrect, hasOccurred }: TeamMatchupBoxComponentProps) => {\n  const { visitingTeamName, visitingTeamEloWinExp, homeTeamName, homeTeamEloWinExp, game } = schedulePrediction;\n  const isScheduled: boolean = !SchedulePredictionUtils.hasPredictionOccurred(schedulePrediction);\n  const didVisitorWin: boolean = game ? (game.pointsScoredVisitorAmt > game.pointsScoredHomeAmt) : false;\n  const didHomeWin: boolean = game ? (game.pointsScoredHomeAmt > game.pointsScoredVisitorAmt) : false;\n\n  // Only display the point spread for the favored team (the team with a negative point spread).\n  let visitorPointSpreadNo: number | undefined = undefined;\n  let homePointSpreadNo: number | undefined = undefined;\n  if (game !== null && typeof(game) !== \"undefined\") {\n    visitorPointSpreadNo = game.visitorPointSpreadNo < 0\n    ? game.visitorPointSpreadNo\n    : undefined;\n    homePointSpreadNo = game.visitorPointSpreadNo > 0\n    ? game.visitorPointSpreadNo * -1\n    : undefined;\n  }\n\n  let cardClassNames: string = styles['game-body'];\n  if (isCorrect && hasOccurred) {\n    cardClassNames += ` ${styles['correct']}`;\n  } else if (isCorrect !== null && hasOccurred) {\n    cardClassNames += ` ${styles['incorrect']}`;\n  }\n  if (shouldHighlight) {\n    cardClassNames += ` ${styles['highlight']}`;\n  }\n\n  return (\n    <div key={`teamMatchupBox-${schedulePrediction.scheduleId}`}>\n      <table key={`teamMatchupBox-table-header-${schedulePrediction.scheduleId}`} className={styles['game-header']}>\n        <thead>\n          {renderTableHeader(isScheduled, schedulePrediction)}\n        </thead>\n      </table>\n      <table key={`teamMatchupBox-table-contents-${schedulePrediction.scheduleId}`} className={cardClassNames}>\n        <tbody>\n          {renderTableRowForTeam(visitingTeamName, visitingTeamEloWinExp, isScheduled, didVisitorWin, visitorPointSpreadNo, game?.pointsScoredVisitorAmt )}\n          {renderTableRowForTeam(homeTeamName, homeTeamEloWinExp, isScheduled, didHomeWin, homePointSpreadNo, game?.pointsScoredHomeAmt )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nfunction renderTableHeader(\n  isScheduled: boolean,\n  schedulePrediction: SchedulePrediction,\n): JSX.Element {\n  const timeStr: string = TimeUtils.getPrintableTimeFromDate(schedulePrediction.date);\n  const header: string = isScheduled ? timeStr : \"FINAL\";\n  return (\n    <tr className={styles['tr']}>\n      <th className={styles['th']}>\n        {header}\n      </th>\n    </tr>\n  )\n}\n\nfunction renderTableRowForTeam(\n  teamName: TeamName,\n  winExp: number,\n  isScheduled: boolean,\n  didWin: boolean,\n  pointSpread?: number,\n  pointsScored?: number\n): JSX.Element {\n  const winExpStr: string = `${(winExp * 100).toFixed(1)}%`;\n  return (\n    <tr className={`${styles['tr']} ${styles['game-team']}`}>\n      <td className={`${styles['td']} ${styles['logo']}`}>\n        <TeamLogoImageComponent teamName={teamName} height={24} />\n      </td>\n      <td className={`${styles['td']} ${styles['team']}`}>\n        {TeamNameUtils.getPrintableNameFromTeamName(teamName)}\n      </td>\n      <td className={`${styles['td']} ${styles['point-spread']}`}>\n        {pointSpread ?? \"\"}\n      </td>\n      <td className={`${styles['td']} ${styles['win-exp']}`}>\n        {winExpStr}\n      </td>\n      <td className={`${styles['td']} ${styles['score']} ${isScheduled ? styles['scheduled'] : styles['occurred']} ${didWin ? styles['winner'] : styles['loser']}`}>\n        {pointsScored ?? \"-\"}\n      </td>\n    </tr>\n  );\n}","import React, { useState } from 'react';\nimport PredictionAccuracyResultsComponent from '../components/PredictionAccuracyResultsComponent';\nimport TeamMatchupBoxComponent from '../components/TeamMatchupBoxComponent';\nimport { Day } from '../types/ModelConstantTypes';\nimport { SchedulePrediction, SchedulePredictionsAccuracy } from '../types/SchedulePredictionTypes';\nimport { DateToSchedulePredictionsMap, SchedulePredictionUtils, WeekNumberToSchedulePredictionsMap } from '../utils/SchedulePredictionUtils';\nimport { TimeUtils } from '../utils/TimeUtils';\nimport styles from './AllSchedulePredictionsContainer.module.css';\n\ntype AllSchedulePredictionsProps = {\n  schedulePredictions: SchedulePrediction[],\n}\n\nconst DEFAULT_CONFIDENCE_LIMIT: number = 59.3;\n\nexport default ({ schedulePredictions }: AllSchedulePredictionsProps) => {\n  if (schedulePredictions.length === 0) { \n    return <div>No schedule predictions were found.</div> \n  }\n\n  const [confidenceLimit, setConfidenceLimit] = useState(DEFAULT_CONFIDENCE_LIMIT);\n  const [shouldOnlyDisplayConfidentPredictions, setShouldOnlyDisplayConfidentPredictions] = useState(false);\n\n  const confidentPredictions: SchedulePrediction[] = schedulePredictions.filter((schedulePrediction: SchedulePrediction) => {\n    return SchedulePredictionUtils.isPredictionConfident(schedulePrediction, confidenceLimit / 100);\n  });\n\n  const predictions = shouldOnlyDisplayConfidentPredictions ? confidentPredictions : schedulePredictions;\n  const weekNumberToSchedulePredictionsMap: WeekNumberToSchedulePredictionsMap = SchedulePredictionUtils.getWeekNumberToSchedulePredictionsMap(predictions);\n  const sequentialWeekNumbers: string[] = Object.keys(weekNumberToSchedulePredictionsMap);\n  const currentWeek: string = sequentialWeekNumbers.pop() ?? \"\";\n\n  const handleConfidenceLimitSliderEvent = (event: any) => {\n    const newConfidenceLimitStr: string = event.target.value ?? confidenceLimit.toString();\n    const newConfidenceLimit: number = parseFloat(newConfidenceLimitStr) / 10;\n    setConfidenceLimit(newConfidenceLimit);\n  }\n\n  const handleDisplayConfidentPredictionsOnlyToggle = (event: any) => {\n    setShouldOnlyDisplayConfidentPredictions(event.target.checked)\n  }\n\n  const accuracy: SchedulePredictionsAccuracy = SchedulePredictionUtils.getAccuracyFromSchedulePredictions(\n    schedulePredictions,\n    confidenceLimit / 100\n  );\n\n  return (\n    <div>\n      <div className={styles['predictions-results']}>\n        <PredictionAccuracyResultsComponent \n          accuracy={accuracy}\n          confidenceLimit={confidenceLimit}\n          handleConfidenceLimitSliderEvent={handleConfidenceLimitSliderEvent}\n        />\n      </div>\n      <div className={styles['confident-predictions-toggle']}>\n        <div className={styles['confident-predictions-toggle-title']}>\n          Only Display Confident Predictions?\n        </div>\n        <input className={styles['confident-predictions-toggle-checkbox']} type=\"checkbox\" checked={shouldOnlyDisplayConfidentPredictions} onChange={handleDisplayConfidentPredictionsOnlyToggle} />\n      </div>\n      <div className={styles['list-of-weekly-matchups']}>\n        {renderMatchupsForWeeks([currentWeek], weekNumberToSchedulePredictionsMap, confidenceLimit)}\n        <div className={`${styles['header']} ${styles['completed-header']}`}>Completed</div>\n        {renderMatchupsForWeeks(sequentialWeekNumbers, weekNumberToSchedulePredictionsMap, confidenceLimit)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderMatchupsForWeeks(\n  weekNumbers: string[], \n  weekNumberToSchedulePredictionsMap: WeekNumberToSchedulePredictionsMap,\n  confidenceLimit: number\n): JSX.Element[] {\n  return weekNumbers.map((weekNumber: string) => {\n    const schedulePredictions: SchedulePrediction[] = weekNumberToSchedulePredictionsMap[weekNumber];\n    const dateToSchedulePredictionsMap: DateToSchedulePredictionsMap = SchedulePredictionUtils.getDateToSchedulePredictionsMap(schedulePredictions);\n    const dates: string[] = Object.keys(dateToSchedulePredictionsMap);\n    return (\n      <div key={`matchups-for-weeks-${Math.random()}`}>\n        <div className={styles['week-number']}>Week {weekNumber}</div>\n        {renderMatchupsForWeek(dates, dateToSchedulePredictionsMap, confidenceLimit)}\n      </div>\n    );\n  });\n}\n\nfunction renderMatchupsForWeek(\n  dates: string[], \n  dateToSchedulePredictionsMap: DateToSchedulePredictionsMap,\n  confidenceLimit: number\n): JSX.Element[] {\n  return dates.map((date: string) => {\n    const dayOfWeek: Day = dateToSchedulePredictionsMap[date][0].dayOfWeek;\n    const printableDate: string = TimeUtils.getPrintableDateFromDateAndDayOfWeek(date, dayOfWeek);\n    return (\n      <div key={date}>\n        <div className={styles['date']}>{printableDate}</div>\n        <div className={styles['week-matchups']}>\n          {dateToSchedulePredictionsMap[date].map((schedulePrediction: SchedulePrediction) => renderSchedulePredictionRow(schedulePrediction, confidenceLimit))}\n        </div>\n      </div>\n    );\n  });\n}\n\nfunction renderSchedulePredictionRow(schedulePrediction: SchedulePrediction, confidenceLimit: number): JSX.Element {\n  const shouldHighlight: boolean = SchedulePredictionUtils.isPredictionConfident(schedulePrediction, confidenceLimit / 100);\n  const hasOccurred: boolean = SchedulePredictionUtils.hasPredictionOccurred(schedulePrediction);\n  const isCorrect: boolean = SchedulePredictionUtils.isPredictionCorrect(schedulePrediction);\n\n  return(\n    <div key={`matchupbox-${schedulePrediction.scheduleId}`} className={styles['matchup-box']}>\n      <TeamMatchupBoxComponent \n        schedulePrediction={schedulePrediction} \n        shouldHighlight={shouldHighlight} \n        isCorrect={isCorrect} \n        hasOccurred={hasOccurred}\n      />\n    </div>\n  );\n}","import gql from 'graphql-tag';\nimport { SchedulePrediction } from '../types/SchedulePredictionTypes';\n\nexport type GetSchedulePredictionsQueryResponse = {\n  loading: boolean;\n  data: {\n    schedulePredictions: SchedulePrediction[],\n  }\n}\n\nexport const GetSchedulePredictionsQuery = gql`\n  query GetSchedulePredictions {\n    schedulePredictions {\n      scheduleId,\n      gameId,\n      game {\n        pointsScoredHomeAmt,\n        pointsScoredVisitorAmt,\n        visitorPointSpreadNo\n      },\n      weekNumber,\n      seasonYear,\n      dayOfWeek,\n      date,\n      homeTeamName,\n      homeTeamEloRating,\n      homeTeamEloRatingRank,\n      homeTeamEloWinExp,\n      visitingTeamName,\n      visitingTeamEloRating,\n      visitingTeamEloRatingRank,\n      visitingTeamEloWinExp\n    }\n  }\n`;","import React from 'react';\nimport { Query } from \"react-apollo\";\nimport AllSchedulePredictionsContainer from '../containers/AllSchedulePredictionsContainer';\nimport { GetSchedulePredictionsQuery, GetSchedulePredictionsQueryResponse } from '../queries/GetSchedulePredictionsQuery';\n\nexport default () => (\n  <Query query={GetSchedulePredictionsQuery}>\n    {({ loading, data }: GetSchedulePredictionsQueryResponse) => !loading && (\n      <AllSchedulePredictionsContainer schedulePredictions={data?.schedulePredictions ?? []} />\n    )}\n  </Query>\n);","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams\n} from 'react-router-dom';\nimport styles from './App.module.css';\n\nimport AllSchedulePredictionsRenderer from './renderers/AllSchedulePredictionsRenderer';\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <Router>\n        <Switch>\n          <Route exact path='/'>\n            <AllSchedulePredictionsRenderer />\n          </Route>\n          <Route path='/sp/:schedulePredictionId'>\n            <SchedulePredictionDashboardContainerRoute />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nfunction SchedulePredictionDashboardContainerRoute() {\n  let { schedulePredictionId } = useParams();\n  return (<div>{schedulePredictionId}</div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from 'apollo-boost';\n\nexport default new ApolloClient({\n  // todo(jamesroseman): This should for sure be an ENV_VAR or something.\n  uri: \"http://localhost:4000/graphql\",\n});\n","import { ApolloProvider } from 'react-apollo';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport client from './lib/apollo';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"predictions-results\":\"AllSchedulePredictionsContainer_predictions-results__2PmM2\",\"week-matchups\":\"AllSchedulePredictionsContainer_week-matchups__Ac8W5\",\"week-number\":\"AllSchedulePredictionsContainer_week-number__2hc_v\",\"date\":\"AllSchedulePredictionsContainer_date__3BUUA\",\"matchup-box\":\"AllSchedulePredictionsContainer_matchup-box__3aZyD\",\"header\":\"AllSchedulePredictionsContainer_header__2FgrZ\",\"completed-header\":\"AllSchedulePredictionsContainer_completed-header__jE4o0\",\"confident-predictions-toggle\":\"AllSchedulePredictionsContainer_confident-predictions-toggle__eayFg\",\"confident-predictions-toggle-title\":\"AllSchedulePredictionsContainer_confident-predictions-toggle-title__L5rRI\",\"confident-predictions-toggle-checkbox\":\"AllSchedulePredictionsContainer_confident-predictions-toggle-checkbox__2hPC0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results-card\":\"PredictionAccuracyResultsComponent_results-card__2cNcb\",\"th\":\"PredictionAccuracyResultsComponent_th__3S09j\",\"tr\":\"PredictionAccuracyResultsComponent_tr__2MgTV\",\"td\":\"PredictionAccuracyResultsComponent_td__1OkQv\",\"title\":\"PredictionAccuracyResultsComponent_title__3tnBO\",\"data\":\"PredictionAccuracyResultsComponent_data__CBVYf\",\"confidence-limit\":\"PredictionAccuracyResultsComponent_confidence-limit__3VbfI\",\"confidence-limit-slider\":\"PredictionAccuracyResultsComponent_confidence-limit-slider__16wRP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game-body\":\"TeamMatchupBoxComponent_game-body__6l3eP\",\"highlight\":\"TeamMatchupBoxComponent_highlight__1qDgs\",\"correct\":\"TeamMatchupBoxComponent_correct__8FFKE\",\"incorrect\":\"TeamMatchupBoxComponent_incorrect__2-LlH\",\"td\":\"TeamMatchupBoxComponent_td__2ryOy\",\"th\":\"TeamMatchupBoxComponent_th__16w5b\",\"tr\":\"TeamMatchupBoxComponent_tr__2_qN-\",\"logo\":\"TeamMatchupBoxComponent_logo__klSr5\",\"team\":\"TeamMatchupBoxComponent_team__1eMjz\",\"point-spread\":\"TeamMatchupBoxComponent_point-spread__3_iUp\",\"win-exp\":\"TeamMatchupBoxComponent_win-exp__3i2rw\",\"score\":\"TeamMatchupBoxComponent_score__1Uhuk\",\"occurred\":\"TeamMatchupBoxComponent_occurred__mkwJf\",\"scheduled\":\"TeamMatchupBoxComponent_scheduled__2bHMT\",\"winner\":\"TeamMatchupBoxComponent_winner__10qJH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};"],"sourceRoot":""}